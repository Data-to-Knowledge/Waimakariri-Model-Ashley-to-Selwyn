# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# gauge_loc_v02.py
# Created on: 2016-04-07 10:09:48.00000
#   (generated by ArcGIS/ModelBuilder)
# Description:
# ---------------------------------------------------------------------------

# Set the necessary product code
# import arcinfo


# Import arcpy module
import arcpy
from arcpy import env
from arcpy.sa import *
import ArcHydroTools as ah

# Define functions

def snap_points(points, lines, distance):

    import arcgisscripting, sys

    gp = arcgisscripting.create()

    # Load the Analysis toolbox so that the Near tool is available
    gp.toolbox = "analysis"

    # Perform the Near operation looking for the nearest line
    # (from the lines Feature Class) to each point (from the
    # points Feature Class). The third argument is the search
    # radius - blank means to search as far as is needed. The
    # fourth argument instructs the command to output the
    # X and Y co-ordinates of the nearest point found to the
    # NEAR_X and NEAR_Y fields of the points Feature Class
    gp.near(points, lines, str(distance), "LOCATION")

    # Create an update cursor for the points Feature Class
    # making sure that the NEAR_X and NEAR_Y fields are included
    # in the return data
    rows = gp.UpdateCursor(points, "", "", "NEAR_X, NEAR_Y")

    row = rows.Next()

    # For each row
    while row:
        # Get the location of the nearest point on one of the lines
        # (added to the file as fields by the Near operation above
        new_x = row.GetValue("NEAR_X")
        new_y = row.GetValue("NEAR_Y")

        # Create a new point object with the new x and y values
        point = gp.CreateObject("Point")
        point.x = new_x
        point.y = new_y

        # Assign it to the shape field
        row.shape = point

        # Update the row data and move to the next row
        rows.UpdateRow(row)
        row = rows.Next()

### Local variables:
## input
env.workspace = 'C:/ecan/local/Projects/otop/GIS/vector/min_flow'

min_sites = 'min_flow_sites_otop.shp'
recorders = 'otop_recorders_v02.shp'
streams = 'MFE_rivers1.shp'
dem = 'otop_8m_dem.tif'

point_dis = 1000

merge_cond = "ReferenceN \"ReferenceN\" true true false 12 Text 0 0 ,First,#,min_gauge_sites_otop,ReferenceN,-1,-1;SITENUMBER \"SITENUMBER\" true true false 10 Long 0 10 ,First,#,otop_recorders_v02,SITENUMBER,-1,-1"

## output

min_gauge_sites = 'min_gauge_sites_otop.shp'
sites = 'sites.shp'
stream_diss = 'MFE_rivers_diss.shp'
stream_route = 'MFE_rivers_route.shp'
stream_vert = 'stream_vert.shp'
site_vert = 'site_vert.shp'
stream_split = 'MFE_rivers_split.shp'
site_vert_join = 'site_vert_join.shp'
stream_seg_csv = 'results/site_stream_seg.csv'

##########################
#### Processing

### Process stie and streams vectors

# Select the gauging sites from the min flow sites
arcpy.Select_analysis(min_sites, min_gauge_sites, "ReferenceS = 'Gauging'")

# Merge min_gauge_sites to recorders
arcpy.Merge_management([min_gauge_sites, recorders], sites, merge_cond)

# create site numeric field
arcpy.AddField_management(sites, "site", "LONG")
arcpy.CalculateField_management(sites, "site", '!SITENUMBER! if !SITENUMBER! > 0 else int(!ReferenceN!)', "PYTHON_9.3")

# Snap sites to streams
snap_points(sites, streams, point_dis)

# Process: Trim Line
#arcpy.TrimLine_edit(streams, str(trim_len) + " Meters", "DELETE_SHORT")

# Process: Dissolve
arcpy.Dissolve_management(streams, stream_diss, "", "", "MULTI_PART", "DISSOLVE_LINES")

# feature to vertex
arcpy.FeatureVerticesToPoints_management(stream_diss, stream_vert, "END")

# Remove duplicate points
arcpy.DeleteIdentical_management(stream_vert, 'Shape')

# Add new site numbers to vertex points
arcpy.CalculateField_management(stream_vert, "ORIG_FID", '!FID! + 10000001', "PYTHON_9.3")

# Merge of vertexes and sites
arcpy.Merge_management([sites, stream_vert], site_vert)

# Add new site numbers to vertex points
arcpy.CalculateField_management(site_vert, "site", '!ORIG_FID! if !site! == 0 else !site!', "PYTHON_9.3")

# Split line at point
arcpy.SplitLineAtPoint_management(stream_diss, site_vert, stream_split, '1 Meter')

# Add field numbers to stream segments layer
arcpy.AddField_management(stream_split, "num", "SHORT")
arcpy.CalculateField_management(stream_split, 'num', '!FID! + 1', "PYTHON_9.3")
arcpy.AddField_management(stream_split, "len", "LONG")
arcpy.CalculateField_management(stream_split, "len", '!Shape.length!', "PYTHON_9.3")

# Spatial join points to lines
arcpy.SpatialJoin_analysis(site_vert, stream_split, site_vert_join, "JOIN_ONE_TO_MANY", "KEEP_ALL", "site \"site\" true true false 10 Long 0 10 ,First,#,site_vert,site,-1,-1;num \"num\" true true false 5 Short 0 5 ,First,#,MFE_rivers_split,num,-1,-1;len \"len\" true true false 10 Long 0 10 ,First,#,MFE_rivers_split,len,-1,-1", "WITHIN_A_DISTANCE", "1 Meters", "")

# Export data
arcpy.ExportXYv_stats(site_vert_join, "site;num;len", "COMMA", stream_seg_csv, "ADD_FIELD_NAMES")


### STOP and check the river mouth points to make sure that there is a point there!
### All river mouths MUST have a point, if they do not, change the rivers layer to trick the process to give it a point.




